# -*- coding: utf-8 -*-
"""LSTM for Audio Denoising.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8wZSD2shXvt3_JO2yqXZdIb3umcF7R3
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
#!cd 'drive/My Drive/RL_Code'
# %cd drive/My Drive/audio_files
import numpy as np

import IPython.display as ipd
import librosa
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

# a = np.load('inputs.npy',allow_pickle=True)
a = np.load('rounded_inputs.npy',allow_pickle=True)

# Uncomment this to change the shape of inputs
# new_a = []
# for e in a:
#   new_a.append(e[:len(e)-(len(e)%1000)])
# len(new_a)
# np.save("rounded_inputs.npy", np.array(new_a))

flattened = np.hstack(a)
noise = np.random.normal(0, 0.001, (int(flattened.shape[0]),))
noisy_data = noise + flattened
X_shaped = np.reshape(noisy_data, (int(flattened.shape[0]/1000), 1000))
Y_shaped = np.reshape(flattened, (int(flattened.shape[0]/1000), 1000))

# If model exists, then you can load it in
# model = keras.models.load_model("audio_lstm")


# Create a new Neural Network with Dense Layers only (can comment if you would like)
model = Sequential()
model.add(Dense(2000, input_dim=1000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.add(Dense(2000, activation='tanh'))
model.add(Dense(1000, activation='tanh'))
model.compile(loss='mean_squared_error', optimizer='adam', metrics=["accuracy"])
model.summary()
history = model.fit(X_shaped, Y_shaped, epochs=1000, batch_size=2048, verbose=2)

# Flatten into one large array and add noise
flattened = np.hstack(a)
noise = np.random.normal(0, 0.001, (int(flattened.shape[0]),))
noisy_data = noise + flattened

# Reshape inputs and outputs for training
X_shaped = np.reshape(noisy_data, (int(flattened.shape[0]/1000), 1, 1000))
Y_shaped = np.reshape(flattened, (int(flattened.shape[0]/1000), 1, 1000))

# Split train and test data
X_train, X_test, y_train, y_test = train_test_split(X_shaped, Y_shaped, test_size=0.25, random_state=42)

# Create and fit the LSTM network
model = Sequential()
model.add(LSTM((1000), input_shape=(1, 1000), return_sequences=True, activation='tanh'))
model.add(LSTM((1000), return_sequences=True, activation='tanh'))
model.add(LSTM((1000), return_sequences=True, activation='tanh'))
model.add(LSTM((1000), return_sequences=True, activation='tanh'))
model.compile(loss='mean_squared_error', optimizer='adam', metrics=["accuracy"])
model.summary()
history = model.fit(X_train, y_train, epochs=400, batch_size=1024, verbose=2)
model.save("audio_lstm")

#Continue training (if needed)
history2 = model.fit(X_train, y_train, epochs=1000, batch_size=64, verbose=2)
model.save("audio_lstm")


# Test audio files with model
for audio_file in range(10):
  noise_test = np.random.normal(0, 0.0003, (a[audio_file].shape[0],))
  noisy_test_data = noise_test + a[audio_file]
  X_in = np.reshape(noisy_test_data, (int(a[audio_file].shape[0]/1000), 1, 1000))
  predict = model.predict(X_in)
  Y_out = np.reshape(predict, (a[audio_file].shape[0]))
  print('Predicted: ')
  plt.plot (Y_out)
  plt.show()
  print('Original:')
  plt.plot(noisy_test_data)
  plt.show()